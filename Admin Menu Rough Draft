#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <limits>
#include <unordered_map>

using namespace std;

// Define a Book structure to hold book information
struct Book {
    string title;
    string author;
    string cost;
};

// Global vector to store the books in the library
vector<Book> library;

// Function to load books from file
void loadBooks() {
    ifstream inFile("books_data.txt");
    if (!inFile.is_open()) {
        cout << "Unable to open books file." << endl;
        return;
    }

    library.clear(); // Clear existing books
    string title, author, cost;
    while (getline(inFile, title) && getline(inFile, author) && getline(inFile, cost)) {
        library.push_back({title, author, cost});
    }

    inFile.close();
}

// Function to save books to file
void saveBooks() {
    ofstream outFile("books_data.txt");
    if (!outFile.is_open()) {
        cout << "Unable to open books file for writing." << endl;
        return;
    }

    for (const auto& book : library) {
        outFile << book.title << endl;
        outFile << book.author << endl;
        outFile << book.cost << endl;
    }

    outFile.close();
}

// Function to add a book
void addBook() {
    string title, author, cost;

    cout << "Enter the title of the book: ";
    cin.ignore();
    getline(cin, title);

    cout << "Enter the author of the book: ";
    getline(cin, author);

    cout << "Enter the cost of the book: ";
    getline(cin, cost);

    // Create a new Book object with the provided title, author, and cost
    Book newBook = {title, author, cost};

    // Add the new book to the library
    library.push_back(newBook);

    cout << "Book added successfully." << endl;

    // Save books to file
    saveBooks();
}

// Function to remove a book
void removeBook() {
    string title, author;

    cout << "Enter the title of the book you want to remove: ";
    cin.ignore();
    getline(cin, title);

    cout << "Enter the author of the book you want to remove: ";
    getline(cin, author);

    // Search for the book in the library
    auto it = find_if(library.begin(), library.end(), [&](const Book& book) {
        return book.title == title && book.author == author;
    });

    if (it != library.end()) {
        // Remove the book from the library
        library.erase(it);
        cout << "Book removed successfully." << endl;

        // Save books to file
        saveBooks();
    } else {
        cout << "Book not found in the library." << endl;
    }
}

// Function to update book information
void updateBook() {
    string title, author, cost;

    cout << "Enter the title of the book you want to update: ";
    cin.ignore();
    getline(cin, title);

    cout << "Enter the author of the book you want to update: ";
    getline(cin, author);

    cout << "Enter the cost of the book you want to update: ";
    getline(cin, cost);

    auto it = find_if(library.begin(), library.end(), [&](const Book& book) {
        return book.title == title && book.author == author && book.cost == cost;
    });

    if (it != library.end()) {
        cout << "Enter the new title of the book (or press Enter to keep current title): ";
        string newTitle;
        getline(cin, newTitle);

        cout << "Enter the new author of the book (or press Enter to keep current author): ";
        string newAuthor;
        getline(cin, newAuthor);

        cout << "Enter the new cost of the book (or press Enter to keep current cost): ";
        string newCost;
        getline(cin, newCost);

        if (!newTitle.empty()) {
            it->title = newTitle;
        }
        if (!newAuthor.empty()) {
            it->author = newAuthor;
        }
        if (!newCost.empty()) {
            it->cost = newCost;
        }

        cout << "Book information updated successfully." << endl;

        saveBooks(); // Save books to file
    } else {
        cout << "Book not found in the library." << endl;
    }
}

// Function to view all checkouts
void viewCheckouts() {
    ifstream inFile("CheckOutHistory.txt");
    if (!inFile.is_open()) {
        cout << "Unable to open CheckOutHistory file." << endl;
        return;
    }

    cout << "Checkouts:\n";
    cout << "-----------------\n";
    string firstName, bookTitle, status;
    while (inFile >> firstName >> bookTitle >> status) {
        cout << "Borrower: " << firstName << endl;
        cout << "Book: " << bookTitle << endl;
        cout << "Status: " << status << endl;
        cout << "-----------------\n";
    }

    inFile.close();
}

// Function to load user credentials from file into the unordered_map
unordered_map<string, string> userCredentials;

void loadUserCredentials() {
    ifstream file("users_data.txt");
    if (!file.is_open()) {
        cerr << "Failed to open users file for reading." << endl;
        return;
    }

    userCredentials.clear(); // Clear existing userCredentials
    string username, password;
    while (file >> username >> password) {
        userCredentials[username] = password;
    }

    file.close();
}

// Function to save user credentials from unordered_map back to file
void saveUserCredentials() {
    ofstream file("users.txt");
    if (!file.is_open()) {
        cerr << "Failed to open users file for writing." << endl;
        return;
    }

    for (const auto& pair : userCredentials) {
        file << pair.first << " " << pair.second << endl;
    }

    file.close();
}

// Function to add a user
void addUser() {
    string username, password;

    cout << "Enter the username of the new user: ";
    cin.ignore();
    getline(cin, username);

    if (userCredentials.find(username) != userCredentials.end()) {
        cout << "An account with this username already exists." << endl;
        return;
    }

    cout << "Enter the password for the new user: ";
    getline(cin, password);

    userCredentials[username] = password;
    saveUserCredentials(); // Save user credentials to file
    cout << "User added successfully." << endl;
}

// Function to remove a user
void removeUser() {
    string username;

    cout << "Enter the username of the user you want to remove: ";
    cin.ignore();
    getline(cin, username);

    auto it = userCredentials.find(username);
    if (it != userCredentials.end()) {
        // Remove the user from the userCredentials map
        userCredentials.erase(it);
        cout << "User removed successfully." << endl;

        // Save user credentials to file
        saveUserCredentials();
    } else {
        cout << "User not found." << endl;
    }
}

// Function to make a user an admin
void makeAdmin() {
    string username;

    cout << "Enter the username of the user you want to make admin: ";
    cin.ignore();
    getline(cin, username);

    auto it = userCredentials.find(username);
    if (it != userCredentials.end()) {
        // Set the user's admin status to true
        it->second = true;
        cout << "User is now an admin." << endl;

        // Save user credentials to file
        saveUserCredentials();
    } else {
        cout << "User not found." << endl;
    }
}

// Function to remove admin privileges from a user
void removeAdmin() {
    string username;

    cout << "Enter the username of the admin you want to demote: ";
    cin.ignore();
    getline(cin, username);

    auto it = userCredentials.find(username);
    if (it != userCredentials.end()) {
        // Set the user's admin status to false
        it->second = false;
        cout << "Admin privileges removed successfully." << endl;

        // Save user credentials to file
        saveUserCredentials();
    } else {
        cout << "User not found." << endl;
    }
}

// Update adminDashboard function
void adminDashboard() {
    loadBooks(); // Load books from file
    loadUserCredentials(); // Load users from file

    int choice;
    do {
        cout << "\nAdmin Dashboard\n";
        cout << "---------------\n";
        cout << "1. Add a Book\n";
        cout << "2. Remove a Book\n";
        cout << "3. Update Book Information\n";
        cout << "4. View Checkouts\n";
        cout << "5. Manage Users\n";
        cout << "6. Logout\n";
        cout << "Enter your choice: ";

        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Adding a Book...\n";
                addBook();
                break;
            case 2:
                cout << "Removing a Book...\n";
                removeBook();
                break;
            case 3:
                cout << "Updating Book Information...\n";
                updateBook();
                break;
            case 4:
                cout << "Viewing Checkouts...\n";
                viewCheckouts();
                break;
            case 5:
                int userChoice;
                cout << "\nUser Management\n";
                cout << "---------------\n";
                cout << "1. Add User\n";
                cout << "2. Remove User\n";
                cout << "3. Make User Admin\n";
                cout << "4. Remove Admin Privileges\n";
                cin >> userChoice;
                switch (userChoice) {
                    case 1:
                        addUser();
                        break;
                    case 2:
                        removeUser();
                        break;
                    case 3:
                        makeAdmin();
                        break;
                    case 4:
                        removeAdmin();
                        break;
                    default:
                        cout << "Invalid choice. Please enter a valid option.\n";
                }
                break;
            case 6:
                char logoutChoice;
                cout << "Are you sure you want to log out? (Y/N): ";
                cin >> logoutChoice;
                if (logoutChoice == 'Y' || logoutChoice == 'y') {
                    cout << "Logging out...\n";
                    // You can add code here to properly logout the user
                    return; // Stop the program
                } else if (logoutChoice == 'N' || logoutChoice == 'n') {
                    cout << "Returning to Admin Dashboard...\n";
                } else {
                    cout << "Invalid choice. Returning to Admin Dashboard...\n";
                }
                break;
            default:
                cout << "Invalid choice. Please enter a valid option.\n";
        }
    } while (choice != 6);
}

int main() {
    adminDashboard();
    return 0;
}
