//Luke Winningham

#include <cstdlib>
#include <fstream>
#include <iostream>
#include <limits>
#include <string>
#include <unordered_map>

const std::string userFilePath = "users.txt";

//user credentials map storing user credentials
std::unordered_map<std::string, std::string> userCredentials;

//function declarations
void loadUserCredentials();
void saveUserCredentials();
void displayPreLoginMenu();
int getUserChoice();
void processPreLoginChoice(int choice);
void login();
void registerUser();
void userSession(const std::string &username);
void logout();
bool validateCredentials(const std::string &username,
                         const std::string &password);
void saveUser(const std::string &username, const std::string &password);
bool usernameExists(const std::string &username);

//menu function
int main() {
  loadUserCredentials();
  while (true) {
    displayPreLoginMenu();
    int choice = getUserChoice();
    processPreLoginChoice(choice);
  }
  saveUserCredentials(); //save credentials at the end
  return 0;
}

//load user credentials from file into the unordered_map
void loadUserCredentials() {
  std::ifstream file(userFilePath);
  std::string username, password;
  while (file >> username >> password) {
    userCredentials[username] = password;
  }
}
void displayCredentials() {
    std::cout << "Current users in the system:\n";
    for (const auto& pair : userCredentials) {
        std::cout << "Username: " << pair.first << ", Password: " << pair.second << std::endl;
    }
}

//save user credentials from unordered_map back to file
void saveUserCredentials() {
    std::ofstream file(userFilePath);
    if (file.is_open()) {
        for (const auto& pair : userCredentials) {
            const std::string& username = pair.first;
            const std::string& password = pair.second;
            file << username << " " << password << std::endl;
        }
        file.close();
    } else {
        std::cout << "Failed to save user credentials.\n";
    }
}


//pre-login menu
void displayPreLoginMenu() {
  std::cout << "Welcome to the Virtual Library Management System\n";
  std::cout << "------------------------------------------------\n";
  std::cout << "1. Login\n";
  std::cout << "2. Register\n";
  std::cout << "3. Exit\n\n";
  std::cout << "Please select an option: ";
}

//get user menu choice
int getUserChoice() {
  int choice;
  while (!(std::cin >> choice)) {
    std::cin.clear(); // Clear error flag
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(),
                    '\n'); // Skip bad input
    std::cout << "Choice is invalid. Please enter a number 1-3: ";
  }
  return choice;
}

//pre-login menu choice process
void processPreLoginChoice(int choice) {
  switch (choice) {
  case 1:
    displayCredentials();
    break;
  case 2:
    registerUser();
    break;
  case 3:
    std::cout << "Thank you for using our VLMS. Have a great day!\n";
    exit(0); //end program
  default:
    std::cout << "Choice is invalid. Enter a number 1-3.\n";
    break;
  }
}

//user login handled
void login() {
  std::string username, password;
  std::cout << "Enter your username: ";
  std::cin >> username;
  std::cout << "Enter your password: ";
  std::cin >> password;

  if (validateCredentials(username, password)) {
    std::cout << "Welcome, " << username << "!\n";
    userSession(username);
  } else {
    std::cout << "Invalid username or password. Please try again.\n";
  }
}

//user session after logging in
void userSession(const std::string &username) {
  int choice;
  do {
    std::cout << "Welcome " << username << ", please select an option:\n";
    std::cout << "1. Advance To User Menu\n";
    std::cout << "2. Logout\n";
    std::cin >> choice;

    if (choice == 2) {
      logout();
      break;
    }
  } while (choice != 2);
}

//user logout output
void logout() { std::cout << "Logging out. Have a great day!\n"; }

// new user registration
void registerUser() {
  std::string username, password;
  std::cout << "Create a username: ";
  std::cin >> username;
  if (usernameExists(username)) {
    std::cout << "An account with this username already exists.\n";
    return;
  }
  std::cout << "Create a password: ";
  std::cin >> password;
  saveUser(username, password);
  std::cout << "Successful registration! Now Log in, " << username << ".\n";
}

//validate credentials
bool validateCredentials(const std::string &username,
                         const std::string &password) {
  auto it = userCredentials.find(username);
  if (it != userCredentials.end() && it->second == password) {
    return true;
  }
  return false;
}

//save user's credentials to the unordered_map on successful registration
void saveUser(const std::string &username, const std::string &password) {
  userCredentials[username] = password;
  std::cout << "User registered successfully.\n";
}

//check if a username is in the unordered_map
bool usernameExists(const std::string &username) {
  return userCredentials.find(username) != userCredentials.end();
}
