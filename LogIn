//Luke Winningham

#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <limits>  

//file paths
const std::string userFilePath = "users.txt";

//function declarations
void displayPreLoginMenu();
int getUserChoice();
void processPreLoginChoice(int choice);
void login();
void registerUser();
void userSession(const std::string& username);
void logout();
bool validateCredentials(const std::string& username, const std::string& password);
void saveUser(const std::string& username, const std::string& password);
bool usernameExists(const std::string& username);


//main 
int main() {
    while (true) {
        displayPreLoginMenu();
        int choice = getUserChoice();
        processPreLoginChoice(choice);
    }
    return 0;
}

//pre login menu setup like it is from canvas
void displayPreLoginMenu() {
    std::cout << "Welcome to the Virtual Library Management System\n";
    std::cout << "------------------------------------------------\n";
    std::cout << "1. Login\n";
    std::cout << "2. Register\n";
    std::cout << "3. Exit\n\n";
    std::cout << "Please select an option: ";
}

int getUserChoice() {
    int choice;
    while (!(std::cin >> choice)) {
        std::cin.clear(); //clear error flag
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
        std::cout << "Choice is invalid. Please enter a number 1-3: ";
    }
    return choice;
}

void processPreLoginChoice(int choice) {
    switch(choice) {
        case 1:
            //login the user
            login();
            break;
        case 2:
            //registering user info
            registerUser();
            break;
        case 3:
            //stop the program
            std::cout << "Thank you for using our VLMS.Have a great day!\n";
            exit(0);
        default:
            //invalid choice
            std::cout << "Choice is invalid. Enter a number 1-3.\n";
            break;
    }
}

//log in menu
void login() {
    std::string username, password;
    //ask for their username
    std::cout << "Enter your username: ";
    std::cin >> username;
    //ask for their password
    std::cout << "Enter your password: ";
    std::cin >> password;

        //start user session if correct 
    if (validateCredentials(username, password)) {
        std::cout << "Welcome, " << username << "!\n";
        userSession(username);
    } else {
        //case of username and password match not existing
        std::cout << "Invalid username or password. Please try again.\n";
    }
}

//welcome the user and give them the option to logout
void userSession(const std::string& username) {
    int choice;
    do {
        std::cout << "Welcome " << username << ", please select an option:\n";
        std::cout << "1. Advance To User Menu\n"; 
        std::cout << "2. Logout\n";
        std::cin >> choice;

        if (choice == 2) {
            logout();
            break;
        }
    } while (choice != 2);
}

//logging out
void logout() {
    std::cout << "Have a great day!\n";
}

//reistering users
void registerUser() {
    std::string username, password;
    std::cout << "Create a username: ";
    std::cin >> username;
    //ensure the username is unique
    if (usernameExists(username)) {
        std::cout << "An account with this username already exists.\n";
        return;
    }
    //create a password
    std::cout << "Create a password: ";
    std::cin >> password;

    //save login
    saveUser(username, password);
    std::cout << "Successful registration! Now Log in, " << username << ".\n";
}

    //check for existing user on login
bool validateCredentials(const std::string& username, const std::string& password) {
    std::ifstream file(userFilePath);
    std::string storedUsername, storedPassword;
    // check if the username and password are being stored
    while (file >> storedUsername >> storedPassword) {
        if (storedUsername == username && storedPassword == password) {
            return true;
        }
    }
    return false;
}


//save the user login info
void saveUser(const std::string& username, const std::string& password) {
    std::ofstream file(userFilePath, std::ios::app);
    if (file.is_open()) {
        file << username << " " << password << std::endl;
        file.close();
    } else {
        std::cout << "Registration was unsuccessful.\n";
    }
}

// check if username exists
bool usernameExists(const std::string& username) {
    std::ifstream file(userFilePath);
    std::string storedUsername, storedPassword;

    while (file >> storedUsername >> storedPassword) {
        if (storedUsername == username) {
            return true;
        }
    }
    return false;
}
