// Dominic Martin
// May 4

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <limits>
#include <algorithm>
#include <LogIn>

using namespace std;

// Define a Book structure to hold book information
struct Book {
    string title;
    string author;
    bool borrowed;

    Book(const string& title, const string& author, bool borrowed)
        : title(title), author(author), borrowed(borrowed) {}
};

vector<Book> library; // Global vector to store the books in the library

// Function to load books from file
void loadBooks() {
    ifstream inFile("books_data.txt");
    if (!inFile.is_open()) {
        cout << "Unable to open books file." << endl;
        return;
    }

    library.clear(); // Clear existing books
    string title, author;
    bool borrowed;
    while (getline(inFile, title) && getline(inFile, author)) {
        string borrowedStr;
        getline(inFile, borrowedStr);
        borrowed = (borrowedStr == "true");
        library.push_back({title, author, borrowed});
    }

    inFile.close();
}

// Function to save books to file
void saveBooks() {
    ofstream outFile("books_data.txt");
    if (!outFile.is_open()) {
        cout << "Unable to open books file for writing." << endl;
        return;
    }

    for (const auto& book : library) {
        outFile << book.title << endl;
        outFile << book.author << endl;
        outFile << (book.borrowed ? "true" : "false") << endl;
    }

    outFile.close();
}

// Function to search for books by title or author
void searchBooks() {
    string query;
    cout << "Search for book by title or author: ";
    getline(cin, query);

    cout << "Search Results:\n";
    cout << "-------------------\n";
    for (const auto& book : library) {
        if (book.title.find(query) != string::npos || book.author.find(query) != string::npos) {
            cout << "Title: " << book.title << endl;
            cout << "Author: " << book.author << endl;
            cout << "Borrowed: " << (book.borrowed ? "Yes" : "No") << endl;
            cout << "-------------------\n";
        }
    }
}

// Function to borrow a book
void borrowBook() {
    string title;
    cout << "Enter the title of the book you want to borrow: ";
    getline(cin, title);

    auto it = find_if(library.begin(), library.end(), [&](const Book& book) {
        return book.title == title && !book.borrowed;
    });

    if (it != library.end()) {
        it->borrowed = true;
        cout << "Book '" << title << "' borrowed successfully.\n";
        saveBooks();
    } else {
        cout << "Book not available for borrowing.\n";
    }
}

// Function to return a book
void returnBook() {
    string title;
    cout << "Enter the title of the book you want to return: ";
    getline(cin, title);

    auto it = find_if(library.begin(), library.end(), [&](const Book& book) {
        return book.title == title && book.borrowed;
    });

    if (it != library.end()) {
        it->borrowed = false;
        cout << "Book '" << title << "' returned successfully.\n";
        saveBooks();
    } else {
        cout << "Book not found in borrowed list.\n";
    }
}

// Function to view borrowed books
void viewBorrowedBooks() {
    cout << "Borrowed Books:\n";
    cout << "-------------------\n";
    for (const auto& book : library) {
        if (book.borrowed) {
            cout << "Title: " << book.title << endl;
            cout << "Author: " << book.author << endl;
            cout << "-------------------\n";
        }
    }
}

// Function to update user profile
void updateProfile() {
    string newName, newPassword;
    cout << "Enter new name: ";
    getline(cin, newName);
    cout << "Enter new password: ";
    getline(cin, newPassword);

    // Update profile in user profile file
    ofstream outFile("users.txt");
    if (!outFile.is_open()) {
        cout << "Unable to open user profile file for writing." << endl;
        return;
    }
    outFile << newName << endl;
    outFile << newPassword << endl;
    outFile.close();
}

void displayMenu() {
    cout << "User Menu\n";
    cout << "-------------------\n";
    cout << "1. Search for Books\n";
    cout << "2. Borrow a Book\n";
    cout << "3. Return a Book\n";
    cout << "4. View Borrowed Books\n";
    cout << "5. Update Profile\n";
    cout << "6. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    loadBooks();

    int choice;
    do {
        displayMenu();
        if (!(cin >> choice)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input. Please enter a number.\n";
            continue;
        }
        cin.ignore();

        switch (choice) {
            case 1:
                searchBooks();
                break;
            case 2:
                borrowBook();
                break;
            case 3:
                returnBook();
                break;
            case 4:
                viewBorrowedBooks();
                break;
            case 5:
                updateProfile();
                break;
            case 6:
                cout << "Logging out...\n";
                displayPreLoginMenu()
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
